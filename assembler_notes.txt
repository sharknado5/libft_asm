Assembler Wikibook summary

(SYNTAX AT AROUND LINE 120)

x86 Architecture:
-	8 General-Purpose Registers (GPR)
-	6 Segment Registers
-	1 Flag register
-	1 Instruction Pointer
(64-bit x86 has additional registers)


8 GENERAL-PURPOSE REGISTERS / GPR's are:

1	-	Accumulator Register (AX). Used for arithmetic
2	-	Counter Register (CX). Used in shift/rotate instructions and loops
3	-	Data Register (DX). Arithmetic and I/O operations
4	-	Base Register (BX). Used as pointer to data (located in segment reg. when in segment mode)
5	-	Stack Pointer Register (SP). Pointer to top of the stack
6	-	Stack Base Pointer Register (BP). Used as Pointer to base of stack
7	-	Source Index Register (SI). Used as Pointer to source in stream operation
8	-	Destination Index Register (DI). Used as Pointer to a destination in stream operations

Order used is the same as the order used in a push-to-stack operation.

All registers can be accessed in 16-bit and 32-bit mode. 
16-bit --> abbr used in list above. eg. AX
32-bit --> list above, prefixed with 'E'. eg. EAX
64-bit --> prefixed with 'R'. eg. RAX

It is also possible to address the first four registers (AX, CX, DX and BX) in their size of 16-bit as two 8-bit halves. 
The least significant byte (LSB), or low half, is identified by replacing the 'X' with an 'L'. 
The most significant byte (MSB), or high half, uses an 'H' instead. 
For example, CL is the LSB of the counter register, whereas CH is its MSB.

In total, this gives us five ways to access the accumulator, counter, data and base registers: 64-bit, 32-bit, 16-bit, 8-bit LSB, and 8-bit MSB. 
The other four are accessed in only three ways: 64-bit, 32-bit and 16-bit.


6 SEGMENT REGISTER:

1	-	Stack Segment (SS). Pointer to stack
2	-	Code Segment (CS). Pointer to code
3	-	Data Segment (DS). Pointer to data
4	-	Extra Segment (ES). Pointer to extra data
5	-	FS. Same as ES.
6	-	GS. Same as ES and FS


EFLAGS Registers:

EFLAGS is a 32-bit register used as a collection of bits representing boolean values to store 
-	the results of operations
-	and the state of the processor


The different use of these flags are:
0.	CF : Carry Flag. Set if the last arithmetic operation carried (addition) or borrowed (subtraction) a bit beyond the size of the register. 
			This is then checked when the operation is followed with an add-with-carry or subtract-with-borrow to deal with values too large for 
			just one register to contain.
2.	PF : Parity Flag. Set if the number of set bits in the least significant byte is a multiple of 2.
4.	AF : Adjust Flag. Carry of Binary Code Decimal (BCD) numbers arithmetic operations.
6.	ZF : Zero Flag. Set if the result of an operation is Zero (0).
7.	SF : Sign Flag. Set if the result of an operation is negative.
8.	TF : Trap Flag. Set if step by step debugging.
9.	IF : Interruption Flag. Set if interrupts are enabled.
10.	DF : Direction Flag. Stream direction. If set, string operations will decrement their pointer rather than incrementing it, reading memory backwards.
11.	OF : Overflow Flag. Set if signed arithmetic operations result in a value too large for the register to contain.
12-13.	IOPL : I/O Privilege Level field (2 bits). I/O Privilege Level of the current process.
14.	NT : Nested Task flag. Controls chaining of interrupts. Set if the current process is linked to the next process.
16.	RF : Resume Flag. Response to debug exceptions.
17.	VM : Virtual-8086 Mode. Set if in 8086 compatibility mode.
18.	AC : Alignment Check. Set if alignment checking of memory references is done.
19.	VIF : Virtual Interrupt Flag. Virtual image of IF.
20.	VIP : Virtual Interrupt Pending flag. Set if an interrupt is pending.
21.	ID : Identification Flag. Support for CPUID instruction if can be set.


INSTRUCTION POINTER

EIP register contains the address of the 'next' instruction to be executed if no branching is done.
EIP can only be read through the stack after a 'call' instruction.


MEMORY

The x86 architecture is little-endian, meaning that multi-byte values are written least significant byte first. 
(This refers only to the ordering of the bytes, not to the bits.)

Little-endian examples:
So the 32 bit value B3B2B1B016 on an x86 would be represented in memory as:
	| B0 | B1 | B2 | B3 |

For example, the 32 bits double word 0x1BA583D4 (the 0x denotes hexadecimal) would be written in memory as:
	| D4 | 83 | A5 | 1B |


TWO'S COMPLEMENT REPRESENTATIONS

Two's complement is the standard way of representing negative numbers in binary.
The sign is changed by inverting all the bits and adding one/1

eg:

Start:	0001 = 1
Invert:	1110
Add 1:	1111 = -1


ADDRESSING MODES

Indicates the manner in which the operand is presented

Register Addressing:
	(operand address 'R' is in the address field) ??

	eg: ( note ';' is a comment)

	mov ax, bx ; moves contents of bx into ax

Immediate:
	(actual value is in the field)
	eg:
	
	mov ax, 1 ; moves value of 1 into ax

	or:

	mov ax, 010Ch ; moves value of 0x010C into register ax

Direct memory addressing:
	(operand address is in the address field)
	eg:

	.data
	my_var dw 0abcdh ; my_var = 0xabcd
	.code
	mov ax, [my_var] ; copy my_var content into ax (ax = 0xabcd)

Direct offset addressing:
	(uses arithmetic to modify adress)
	eg:

	byte_table db 12, 15, 16, 22, ..... ; table of bytes
	mov al, [byte_table+2]
	mov al, byte_tyble[2] ; same as former

Register Indirect:
	(field points to a register that contains the operand address)

	mov ax,[di]

	The registers used for indirect addressing are, BX, BP, SI, DI



GENERAL PURPOSE REGISTERS (64-bit naming conventions)

64-bit x86 adds 8 more general-purpose registers, named R8, R9, R10 and so on up to R15. 
It also introduces a new naming convention that must be used for these new registers and can also be used for the old 
ones (except that AH, CH, DH and BH have no equivalents). In the new convention:

R0 is RAX.
R1 is RCX.
R2 is RDX.
R3 is RBX.
R4 is RSP.
R5 is RBP.
R6 is RSI.
R7 is RDI.
R8,R9,R10,R11,R12,R13,R14,R15 are the new registers and have no other names.
R0D~R15D are the lowermost 32 bits of each register. For example, R0D is EAX.
R0W~R15W are the lowermost 16 bits of each register. For example, R0W is AX.
R0L~R15L are the lowermost 8 bits of each register. For example, R0L is AL.


STACK

The stack is a Last In First Out (LIFO) data structure. Data is pushed on, and popped off in reverse.

	mov ax, 006Ah	;	'h' is not part of the value
	mov bx, F79Ah
	mov cx, 1124h
	push ax
	; Pushes the value in AX onto stack, which holds value $006A

	push bx	
		;stack now holds $F79A and $006A.  $F79A is on top. 
	push cd	
		;stack now hold $1124 , $F79A and $006A.  $1124 is on top

	call do_stuff	; function 'do_stuff' does stuff.  The function is not forced to save the registers it uses, hence us saving them.

	pop cx
	pop bx
	pop ax
		;popped the values off the stack in reverse order (in which they were pushed in)


PROTECTED MODE

Flat Memory Model
- If programming in a modern operating system (such as Linux, Windows), you are basically programming in flat 32-bit mode. 
- Any register can be used in addressing, and it is generally more efficient to use a full 32-bit register instead of a 16-bit register part. 
- Additionally, segment registers are generally unused in flat mode, and it is generally a bad idea to touch them.

Multi-Segmented Memory Model[edit]
- Using a 32-bit register to address memory, the program can access (almost) all of the memory in a modern computer.
- For earlier processors (with only 16-bit registers) the segmented memory model was used. 
- The 'CS', 'DS', and 'ES' registers are used to point to the different chunks of memory. 
- For a small program (small model) the CS=DS=ES. For larger memory models, these 'segments' can point to different locations.


